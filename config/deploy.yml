# Name of your application. Used to uniquely configure containers.
service: kamal-wordpress

# Name of the container image.
image:  REGISTRY_USERNAME/kamal-wordpress

# Deploy to these servers.
servers:
  web:
    - YOUR_SERVER_IP
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs


env:
  clear:
    WORDPRESS_DB_HOST: kamal-wordpress-db:3306
    WORDPRESS_DB_USER: wordpress
    WORDPRESS_DB_NAME: wordpress
  secret:
    - WORDPRESS_DB_PASSWORD
    - MYSQL_ROOT_PASSWORD


volumes:
  - /var/www/html

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# Set ssl: false if using something like Cloudflare to terminate SSL (but keep host!).
proxy:
  ssl: true
  host: YOUR_DOMAIN_NAME
  app_port: 8080
  healthcheck:
    path: /health-check.php

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: REGISTRY_USERNAME

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64


accessories:
  db:
    image: mysql:5.7
    host: YOUR_SERVER_IP
    port: "127.0.0.1:3306:3306"
    env:
      clear:
        MYSQL_DATABASE: wordpress
        MYSQL_USER: wordpress
      secret:
        - MYSQL_ROOT_PASSWORD
        - MYSQL_PASSWORD
    volumes:
      - /var/lib/mysql
      # - "/mnt/wordpress:/var/www/html"

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
# env:
#   clear:
#     DB_HOST: 192.168.0.2
#   secret:
#     - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
